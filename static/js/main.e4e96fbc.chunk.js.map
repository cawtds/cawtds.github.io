{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["start_position","lat","lng","original_map","latitude","longitude","layerGroup","InitOriginalMap","useMap","L","document","getElementById","setAttribute","getAllValues","coordInput","inputArray","split","mask","map","val","res","i","length","len","j","k","s","join","push","calcLocations","clearLayers","match","replace","long","latitudes","longitudes","filter","slice","console","log","locations","latLng","renderer","canvas","forEach","loc","addLayer","circleMarker","fillColor","color","weight","bindPopup","on","e","this","openPopup","addTo","handleLatChange","target","value","handleLongChange","App","className","id","onChange","onClick","MapContainer","center","zoom","doubleClickZoom","worldCopyJump","TileLayer","attribution","url","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e4e96fbc.chunk.js","sourcesContent":["import './App.css';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet'\nimport {MapContainer, TileLayer, useMap} from 'react-leaflet';\n\nconst start_position = {lat:51.505, lng:-0.09};\nlet original_map = null;\nlet latitude = '50._7_30';\nlet longitude = '__.1_203';\nlet layerGroup = null;\n\nfunction InitOriginalMap() {\n  original_map = useMap();\n  layerGroup = L.layerGroup([]);\n  document.getElementById('lat').setAttribute('value', latitude);\n  document.getElementById('long').setAttribute('value', longitude);\n  return null;\n}\n\n\nfunction getAllValues(coordInput) {\n  let inputArray = coordInput.split(\"\");\n  let mask = inputArray.map(val => val === '_' ? true : false);\n\n  let res = [''];\n  let i = 0;\n  while (res[0].length < 7) {\n    if (mask[i]) {\n      let len = res.length;\n      for (let j = 0; j < len; j++) {\n        for (let k = 1; k < 10; k++) {\n          let s = res[j].split(\"\").join(\"\");\n          res.push(s + k);\n        }\n        res[j] += '0';\n      }\n    } else {\n      for (let k = 0; k < res.length; k++) {\n        res[k] += inputArray[i];\n      }\n    }\n    i++;\n  }\n\n  return res;\n}\n\nfunction calcLocations() {\n  if (layerGroup) {\n    layerGroup.clearLayers();\n  }\n\n  if (!latitude.match('[0-9._]{7}')) {\n    console.log('invalid latitude');\n    return;\n  }\n\n  if (!longitude.match('[0-9_]{2}\\\\.[0-9_]{5}')) {\n    console.log('invalid longitude');\n    return;\n  }\n\n  let lat = latitude.replace('.', '');\n  let long = longitude.replace('.', '');\n\n  let latitudes = getAllValues(lat);\n  let longitudes = getAllValues(long);\n\n  \n  latitudes = latitudes.filter(s => s.slice(0, 2) < 56 && s.slice(0,2) > 46).map(s => s.slice(0,2) + \".\" + s.slice(2));\n  longitudes = longitudes.filter(s => s.slice(0, 2) < 16 && s.slice(0,2) > 4).map(s => s.slice(0,2) + \".\" + s.slice(2));\n\n  console.log(latitudes);\n  console.log(longitudes);\n\n  let locations = [];\n  for (let i = 0; i < latitudes.length; i++) {\n    for (let j = 0; j < longitudes.length; j++) {\n      let latLng = new L.latLng(latitudes[i], longitudes[j]);\n      locations.push(latLng);\n    }\n  }\n\n  console.log('# of locations: ' + locations.length);\n\n  var renderer = L.canvas();\n  locations.forEach(loc => {\n    layerGroup.addLayer(\n    new L.circleMarker(loc, {\n      fillColor: '#ff0000',\n      color: '#000000',\n      renderer: renderer,\n      weight: 1,\n    })\n    .bindPopup('[' + loc.lat + ', ' +loc.lng +']')\n    .on('mouseover', function(e){\n      this.openPopup();\n    }));\n    layerGroup.addTo(original_map);\n  });\n}\n\nfunction handleLatChange(e) {\n  latitude = e.target.value;\n}\n\nfunction handleLongChange(e) {\n  longitude = e.target.value;\n}\n\nfunction App(){\n  return (\n    <div className=\"App\">\n      <div className=\"inputs\"> \n      Breitegrad: \n      <input id='lat' onChange={handleLatChange}></input>\n      LÃ¤ngengrad:\n      <input id= 'long' onChange={handleLongChange}></input>\n      <button onClick={calcLocations}>Marker anzeigen</button>\n      </div>\n      <div className=\"maps-container\">\n        <div className=\"leaflet-container\">\n          <MapContainer center={start_position} zoom={3} doubleClickZoom={false} worldCopyJump={true}>\n            <InitOriginalMap />\n            <TileLayer\n              attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n          </MapContainer>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}